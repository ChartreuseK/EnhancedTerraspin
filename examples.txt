Square Spiral:
-------------------------------------------------------------
D 		- Pen Down
20 		- Initial line length onto stack
,
10		- Loop counter onto stack
( 		- Pushes IP of this character onto stack
	2E	- Swap SP-2 (line length) with SP (Loop Base Pointer)
	P	- Duplicate line length
	M 	- Move line length (eats one copy from stack)
	90T - Turn 90 degrees (ccw)
    10A - Add 10 to line length
    2E	- Swap SP-2 (Loop base pointer) with SP (line length)
)		- Decrement loop counter, if >0 then jump to base pointer

-------------------------------------------------------------
D20,10(2E P M 90T 10A 2E)


Conditional Test:
All Jumps used are IP relative, need to be adjusted if other things are done
inside the conditional. White space is important when using jumps

This code tests if the value pushed on the second line is <= 1
If so it will rotate 90 degrees before drawing a 100 length line
If not it will just draw the line.
--------------------------------------------------------------------------------
D
5		- Test Value - Will be destroyed by conditional
(		- Push current IP onto stack
1		- Number of bytes ahead to skip
1		-  11
A		- Add to IP
)		- Pop Target and Test value, if Test Value-1 < 1 then fall through. 
	      Else push back test val-1 and Target, and jump to Target
9		- Arrive here if Test Value <= 1 with clean stack
0
T		- Turn 90 degrees to indicate success
(		- Push IP
5		- Jump 5 ahead
A		- Add to IP
R		- Jump to pushed IP+9
K		- (Arrive here if Test Value > 1 with BP and LR on stack) Pop BP off stack
K		- Pop LR off stack
1		- (Arrive here after turning 90 degrees)
0
0		- 100
M		- Move
--------------------------------------------------------------------------------

D5P(11A)90T(5ARKK100M


Procedure test (without C): 8 depth stack minimum
Careful to note that newline characters count when aligning.
On the TRS-80 Model 100 there are two characters \r and \n
--------------------------------------------------------------------------------
0080R	- Jump to start of program
4(		- Start of procedure, align to @40.  Loop 4 times
 3E		- Swap SP-3(Argument) with top of stack(BP)
 PM		- Duplicate argument, and move that distance
 90T	- Turn 90 degrees CCW
 3E		- Swap SP-3(BP) with top of stack(Argument)
)		- Loop 
R		- Return (pop return pointer off stack)

4(		- Start of program, align to @80. Loop 4 times
 D		- Pen down
 100M	- Move 100
 50		- Push argument
 (6A	- Push IP+6 (enough to jump over function call)
 040R	- Jump to @40
 K		- Remove argument from stack
 180T	- Turn 180 degrees
 U		- Pen up
 100M	- Move 100 (Return to start)
 252T	- Turn 72 degrees CCW (Since we're 180 off we need to turn 180+72)
 )		- Loop
--------------------------------------------------------------------------------

0080R,,,,,,,,,,,,,
draw sqaure @40,,,
4(3E PM 90T 3E)R,,
start of prog @80,
5(D 50M 50 (6A040R
K 180T U 50M -72T)

Procedure Test (with C): 
Careful to note that newline characters count when aligning.
On the TRS-80 Model 100 there are two characters \r and \n
--------------------------------------------------------------------------------
0080R	- Jump to start of program
4(		- Start of procedure, align to @40.  Loop 4 times
 3E		- Swap SP-3(Argument) with top of stack(BP)
 PM		- Duplicate argument, and move that distance
 90T	- Turn 90 degrees CCW
 3E		- Swap SP-3(BP) with top of stack(Argument)
)		- Loop 
R		- Return (pop return pointer off stack)

4(		- Start of program, align to @80. Loop 4 times
 D		- Pen down
 100M	- Move 100
 50		- Push argument
 040C	- Call to @40
 K		- Remove argument from stack
 180T	- Turn 180 degrees
 U		- Pen up
 100M	- Move 100 (Return to start)
 252T	- Turn 72 degrees CCW (Since we're 180 off we need to turn 180+72)
 )		- Loop
--------------------------------------------------------------------------------

0080R,,,,,,,,,,,,,
draw sqaure @40,,,
4(3E PM 90T 3E)R,,
start of prog @80,
5(D 50M 50 040C K,
180T U 50M -72T) ,







Draw a positive integer:

draw int ----
         - First: Check if zero or less
 F		 - Swap Return address and argument
 P		 - Duplicate value
 (012A	 - Set branch target if > 0  (target = 164
 )		 - Test if > 0, branch if so, fall through (clear stack) if not
 F		 - Place back return address
 1250R   - Jump directly to 0 draw routine (tail call)
 KK      - (branch target=164) Remove brach address and modified argument from stack 
 P		 - Duplicate argument
 2EF	 - Swap with return address, and shift return address down one. (Stack is Arg Ret Arg  now)
 -1F	 - Push end marker value down onto the stack (Arg Ret -1 Arg)
 0,0	 - Push two useless values to be removed (to allow loop as cond later
 KK		 - Remove loop/useless values on stack (loop target=190)
 P		 - Duplicate current value 
 P       - Another copy
 10Q10X  - Strip off lowest digit
 S		 - Subtract number missing lower digit from number. Equiv of MOD 10
 F		 - Shift down stack, bringing current value back to top
 10Q	 - Divide by 10
 P1A	 - Duplicate current value (add 1 to test against 0)
 (-20A   - Set branch target to loop back if > 0     (Target = 190)
 )		 - Test if > 0, loop if so, fall through (clear stack) if not
 K		 - Remove current value, no longer needed
 P		 - Duplicate digit (loop target=217)
 2A		 - Add two so we can test for our marker -1
 (07A	 - Set branch target if digit is not the marker (target = 227)
 )		 - Test if >= 0, branch if so, fall through (clear stack) if not
 K		 - We hit our end marker, remove it from the stack
 R		 - Now we can return (stack should be Arg Ret, as it was when we entered)
 KK		 - (branch target=227) remove branch address and modified digit from stack
 0040C	 - Print the digit (destroys it from stack)
 (-19AR  - Loop back (target=217)
                 , 
                 
FP(012A)F1250RKKP2
EF-1F0,0         ,
KKPP10Q10XSF10QP1A
(-20A)KP2A(07A)KRK
K0040C(-19AR     ,



draw 0-9 ----
F		 - Swap return address with argument
5X		 - Multiply by 5 (width of an entry in jump table)
1200A	 - 1200 (address of jump table), add to index
R		 - Jump into jump table
- Jump table 0-9
1020R 040R 120R 240R 360R 460R 580R 680R 760R 900R


Entire program, including number drawing routines
   Replace the 127 on the last line with whatever integer you want to write
--------------------------------------------------------
1390R number test,
draw 0-9 @40     ,
F 5X   80A R     ,
draw jmp tbl @80 ,
1250R 270R 350R 470R 590R 690R 810R 910R 990R1130R
draw +int  @150,
FP(012A)F1250RKKP2
EF-1F0,0         ,
KKPP10Q10XSF10QP1A
(-20A)KP2A(07A)KRK
K0040C(-19AR     ,
draw one @270    ,			(Assuming 40x60 cell, positioned top left, pointing right)
20M -90T 10M D 40M			(Ending at top left corner of cell to the right)
U 180T 50M -90T 20
M R              ,
draw two @350	 ,
5M -90T 10M 90T D,
30M -90T 20M -90T,
30M 90T 20M 90T  ,
30M 90T U 50M -90T
5M R             ,
draw three @470  ,
5M -90T 10M 90T D,
30M -90T 20M -90T,
30M 180T 30M -90T,
20M -90T 30M 180T,
U35M 90T 50M -90TR
draw four @590   ,
5M -90T 10M D    ,
20M 90T 30M -90T ,
20M 180T 40M U 10M
-90T 5M R        ,
draw five @690   ,
5M -90T 10M 90T D,
30M 180T 30M 90T ,
20M 90T 30M -90T ,
20M -90T 30M -90T,
U 50M -90T 35M R ,
draw six @810    ,
5M -90T 10M D    ,
40M 90T 30M 90T  ,
20M 90T 30M -90T U
30M -90T 35M R   ,
draw seven @910  ,
5M -90T 10M 90T D,
30M -90T 40M 180T,
U 50M -90T 5M R  ,
draw eight  @990 ,
5M -90T 10M D    ,
40M 90T 30M 90T  ,
20M 90T 30M 180T ,
30M 90T 20M 90T  ,
30M U -90T 10M   ,
-90T 35M R       ,
draw nine @1130  ,
5M -90T 10M D    ,
20M 90T 30M -90T ,
20M 180T 40M 90T ,
30M U -90T 10M   ,
-90T 35M R       ,
draw zero @1250  ,
5M -90T 10M D    ,
40M 90T 30M 90T  ,
40M 90T 30M U -90T
10M -90T 35M R   ,
space @1350      ,
40M R            ,
start @1390      ,
-90T             ,
1024 150C K 40M  ,
37   150C K      ,
-----------------------------------------------------------------

